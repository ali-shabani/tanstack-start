/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RickAndMortyImport } from './routes/rick-and-morty'
import { Route as MoviesImport } from './routes/movies'
import { Route as IndexImport } from './routes/index'
import { Route as MoviesIdImport } from './routes/movies_/$id'

// Create/Update Routes

const RickAndMortyRoute = RickAndMortyImport.update({
  id: '/rick-and-morty',
  path: '/rick-and-morty',
  getParentRoute: () => rootRoute,
} as any)

const MoviesRoute = MoviesImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MoviesIdRoute = MoviesIdImport.update({
  id: '/movies_/$id',
  path: '/movies/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/movies': {
      id: '/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesImport
      parentRoute: typeof rootRoute
    }
    '/rick-and-morty': {
      id: '/rick-and-morty'
      path: '/rick-and-morty'
      fullPath: '/rick-and-morty'
      preLoaderRoute: typeof RickAndMortyImport
      parentRoute: typeof rootRoute
    }
    '/movies_/$id': {
      id: '/movies_/$id'
      path: '/movies/$id'
      fullPath: '/movies/$id'
      preLoaderRoute: typeof MoviesIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/movies': typeof MoviesRoute
  '/rick-and-morty': typeof RickAndMortyRoute
  '/movies/$id': typeof MoviesIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/movies': typeof MoviesRoute
  '/rick-and-morty': typeof RickAndMortyRoute
  '/movies/$id': typeof MoviesIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/movies': typeof MoviesRoute
  '/rick-and-morty': typeof RickAndMortyRoute
  '/movies_/$id': typeof MoviesIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/movies' | '/rick-and-morty' | '/movies/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/movies' | '/rick-and-morty' | '/movies/$id'
  id: '__root__' | '/' | '/movies' | '/rick-and-morty' | '/movies_/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MoviesRoute: typeof MoviesRoute
  RickAndMortyRoute: typeof RickAndMortyRoute
  MoviesIdRoute: typeof MoviesIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MoviesRoute: MoviesRoute,
  RickAndMortyRoute: RickAndMortyRoute,
  MoviesIdRoute: MoviesIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/movies",
        "/rick-and-morty",
        "/movies_/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/movies": {
      "filePath": "movies.tsx"
    },
    "/rick-and-morty": {
      "filePath": "rick-and-morty.tsx"
    },
    "/movies_/$id": {
      "filePath": "movies_/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
